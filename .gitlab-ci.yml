image: registry.gitlab.com/cloudigrade/images/test-container

stages:
  - Test Integrade
  - Deploy Master
  - Test Cloudigrade Inspection
  - Test Cloudigrade API
  - Test Cloudigrade UI
  - Teardown Cloudigrade
  - Cleanup

## SHARED DEFINITIONS ##
.archive_results: &archive_results
  artifacts:
    when: always
    reports:
      junit: "${REPORT_NAME}.xml"
    name: "${REPORT_NAME}"
    paths:
      - "${REPORT_NAME}.xml"
      - "${REPORT_NAME}-api.log"
      - "${REPORT_NAME}-celery-worker.log"
      - "${REPORT_NAME}-celery-beat.log"

.before_script: &before_script
  before_script:
    - python --version
    - oc version
    - make install-dev
    - oc login ${OPENSHIFT_URL} --token ${GITLAB_CI_SA_TOKEN}
    - oc project ${OPENSHIFT_PROJECT}
    - export USE_HTTPS=true

.quick_before_script: &quick_before_script
  before_script:
    - export TEST_MODULES="$(git diff-tree --diff-filter=d --no-commit-id --name-only -r master..HEAD ${TEST_PATH})"
    - if [[ -z "${TEST_MODULES}" ]]; then exit 0 ; fi
    - python --version
    - oc version
    - make install-dev
    - oc login ${OPENSHIFT_URL} --token ${GITLAB_CI_SA_TOKEN}
    - oc project ${OPENSHIFT_PROJECT}
    - export USE_HTTPS=true

.api_all: &api_all
  script:
    - py.test --junitxml="${REPORT_NAME}.xml" -vvv --force-flaky -m 'not inspection' integrade/tests/api

.inspect: &inspect
  script:
    - cp .aws_image_config.yaml integrade/aws_image_config.yaml
    - export XDG_CONFIG_HOME=$PWD
    - py.test --junitxml="${REPORT_NAME}.xml" -vvv -m 'inspection' integrade/tests/api
  after_script:
    - python scripts/aws_reaper.py --env-cloudtrail-only

.master_variables:
  variables: &master_variables
    CLOUDTRAIL_PREFIX: master-integrade-
    AWS_S3_BUCKET_NAME: master-integrade-cloudigrade-s3
    AWS_QUEUE_PREFIX: master-integrade-
    CLOUDIGRADE_BASE_URL: master-integrade.1b13.insights.openshiftapps.com
    OPENSHIFT_PREFIX: c-master-integrade-

.ui_scripts: &ui_scripts
  script:
    - py.test --junitxml="${REPORT_NAME}.xml" -vvv integrade/tests/ui ${EXTRA_PYTEST_ARGS}

## Test Integrade on MRs and Master ##
Test Integrade:
  stage: Test Integrade
  before_script:
    - python --version
    - make install-dev
    - pip install codecov
  script:
    - make lint
    - make test-coverage
    - codecov
  coverage: '/\d+\%\s*$/'


## Deploy Master Review Branches ##
Deploy Master Cloudigrade:
  stage: Deploy Master
  image: registry.gitlab.com/finestructure/pipeline-trigger
  only:
    - master
    - schedule
  variables:
    PROJECT_ID: 7449616
    TARGET_BRANCH: master
    DEPLOYMENT_NAME: integrade
  script:
    - trigger -a ${API_TOKEN} -p ${CLOUDIGRADE_PIPELINE_TOKEN} -t ${TARGET_BRANCH} -e CHAT_INPUT=${DEPLOYMENT_NAME} ${PROJECT_ID}

Deploy Master Frontigrade:
  stage: Deploy Master
  image: registry.gitlab.com/finestructure/pipeline-trigger
  only:
    - master
    - schedule
  variables:
    PROJECT_ID: 7449617
    TARGET_BRANCH: master
    DEPLOYMENT_NAME: integrade
  script:
    - trigger -a ${API_TOKEN} -p ${FRONTIGRADE_PIPELINE_TOKEN} -t ${TARGET_BRANCH} -e CHAT_INPUT=${DEPLOYMENT_NAME} ${PROJECT_ID}

## JOBS THAT RUN ON MRs ##
Inspection Manual:
  stage: Test Cloudigrade API
  variables:
    CLOUDTRAIL_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    AWS_S3_BUCKET_NAME: ${CI_COMMIT_REF_SLUG}-cloudigrade-s3
    AWS_QUEUE_PREFIX: review-${CI_COMMIT_REF_SLUG}-
  except:
    - master
    - schedule
  when: manual
  <<: *before_script
  <<: *archive_results
  <<: *inspect

API All Manually:
  stage: Test Cloudigrade API
  variables:
    CLOUDTRAIL_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    AWS_S3_BUCKET_NAME: ${CI_COMMIT_REF_SLUG}-cloudigrade-s3
    AWS_QUEUE_PREFIX: review-${CI_COMMIT_REF_SLUG}-
  except:
    - master
    - schedule
  when: manual
  <<: *before_script
  <<: *api_all
  <<: *archive_results
  after_script:
    - python scripts/aws_reaper.py --env-cloudtrail-only

API Quick:
  stage: Test Cloudigrade API
  when: on_success
  except:
    - master
    - schedule
  <<: *quick_before_script
  <<: *archive_results
  variables:
    AWS_S3_BUCKET_NAME: ${CI_COMMIT_REF_SLUG}-cloudigrade-s3
    AWS_QUEUE_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    TEST_PATH: integrade/tests/api/v1/
    REPORT_NAME: api_quick
  script:
    - cp .aws_image_config.yaml integrade/aws_image_config.yaml
    - export XDG_CONFIG_HOME=$PWD
    - if [[ "${TEST_MODULES}" ]]; then echo "${TEST_MODULES}" | xargs py.test --junitxml="${REPORT_NAME}.xml" -vvv; else py.test --junitxml="${REPORT_NAME}.xml" -vvv $TEST_PATH -m smoketest; fi

UI Quick:
  stage: Test Cloudigrade UI
  when: always
  except:
    - master
    - schedule
  <<: *quick_before_script
  <<: *archive_results
  variables:
    AWS_S3_BUCKET_NAME: ${CI_COMMIT_REF_SLUG}-cloudigrade-s3
    AWS_QUEUE_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    TEST_PATH: integrade/tests/ui
    REPORT_NAME: ui_quick
    UI_BROWSER: Chrome
    UI_USE_REMOTE: "true"
  script:
    - if [[ "${TEST_MODULES}" ]]; then echo "${TEST_MODULES}" | xargs py.test --junitxml="${REPORT_NAME}.xml" -vvv; else py.test --junitxml="${REPORT_NAME}.xml" -vvv $TEST_PATH -m smoketest; fi
  services:
    - name: selenium/standalone-chrome
      alias: selenium


UI Chrome (Manually):
  stage: Test Cloudigrade UI
  except:
    - master
    - schedule
  when: manual
  <<: *before_script
  <<: *archive_results
  <<: *ui_scripts
  variables:
    AWS_S3_BUCKET_NAME: ${CI_COMMIT_REF_SLUG}-cloudigrade-s3
    AWS_QUEUE_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    REPORT_NAME: ui_chrome
    UI_BROWSER: Chrome
    UI_USE_REMOTE: "true"
  services:
    - name: selenium/standalone-chrome
      alias: selenium

UI Firefox (Manually):
  stage: Test Cloudigrade UI
  except:
    - master
    - schedule
  when: manual
  <<: *before_script
  <<: *archive_results
  <<: *ui_scripts
  variables:
    AWS_S3_BUCKET_NAME: ${CI_COMMIT_REF_SLUG}-cloudigrade-s3
    AWS_QUEUE_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    REPORT_NAME: ui_firefox
    UI_BROWSER: Firefox
    UI_USE_REMOTE: "true"
  services:
    - name: selenium/standalone-firefox
      alias: selenium

UI Microsoft Edge (Manually):
  stage: Test Cloudigrade UI
  except:
    - master
    - schedule
  when: manual
  <<: *before_script
  <<: *archive_results
  <<: *ui_scripts
  variables:
    CLOUDTRAIL_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    AWS_S3_BUCKET_NAME: ${CI_COMMIT_REF_SLUG}-cloudigrade-s3
    AWS_QUEUE_PREFIX: review-${CI_COMMIT_REF_SLUG}-
    REPORT_NAME: ui_edge
    UI_BROWSER: MicrosoftEdge

## JOBS THAT RUN ON MASTER ##
Test Inspection:
  stage: Test Cloudigrade Inspection
  only:
    - master
    - schedule
  <<: *before_script
  <<: *archive_results
  <<: *inspect
  variables:
    CLOUDTRAIL_PREFIX: master-integrade-
    AWS_S3_BUCKET_NAME: master-integrade-cloudigrade-s3
    AWS_QUEUE_PREFIX: master-integrade-
    CLOUDIGRADE_BASE_URL: master-integrade.1b13.insights.openshiftapps.com
    OPENSHIFT_PREFIX: c-master-integrade-

Test API:
  stage: Test Cloudigrade API
  only:
    - master
    - schedule
  when: always
  <<: *before_script
  <<: *api_all
  <<: *archive_results
  variables:
    CLOUDTRAIL_PREFIX: master-integrade-
    AWS_S3_BUCKET_NAME: master-integrade-cloudigrade-s3
    AWS_QUEUE_PREFIX: master-integrade-
    CLOUDIGRADE_BASE_URL: master-integrade.1b13.insights.openshiftapps.com
    OPENSHIFT_PREFIX: c-master-integrade-
    REPORT_NAME: api_all
  after_script:
    - python scripts/aws_reaper.py --env-cloudtrail-only

UI Chrome:
  stage: Test Cloudigrade UI
  only:
    - master
    - schedule
  when: always
  <<: *before_script
  <<: *archive_results
  <<: *ui_scripts
  variables:
    CLOUDTRAIL_PREFIX: master-integrade-
    AWS_S3_BUCKET_NAME: master-integrade-cloudigrade-s3
    AWS_QUEUE_PREFIX: master-integrade-
    CLOUDIGRADE_BASE_URL: master-integrade.1b13.insights.openshiftapps.com
    OPENSHIFT_PREFIX: c-master-integrade-
    REPORT_NAME: ui_chrome
    UI_BROWSER: Chrome
    UI_USE_REMOTE: "true"
  services:
    - name: selenium/standalone-chrome
      alias: selenium

UI Firefox:
  stage: Test Cloudigrade UI
  only:
    - master
    - schedule
  when: always
  <<: *before_script
  <<: *archive_results
  <<: *ui_scripts
  variables:
    CLOUDTRAIL_PREFIX: master-integrade-
    AWS_S3_BUCKET_NAME: master-integrade-cloudigrade-s3
    AWS_QUEUE_PREFIX: master-integrade-
    CLOUDIGRADE_BASE_URL: master-integrade.1b13.insights.openshiftapps.com
    OPENSHIFT_PREFIX: c-master-integrade-
    REPORT_NAME: ui_firefox
    UI_BROWSER: Firefox
    UI_USE_REMOTE: "true"
  services:
    - name: selenium/standalone-firefox
      alias: selenium

UI Microsoft Edge:
  stage: Test Cloudigrade UI
  only:
    - master
    - schedule
  when: always
  <<: *before_script
  <<: *archive_results
  <<: *ui_scripts
  variables:
    CLOUDTRAIL_PREFIX: master-integrade-
    AWS_S3_BUCKET_NAME: master-integrade-cloudigrade-s3
    AWS_QUEUE_PREFIX: master-integrade-
    CLOUDIGRADE_BASE_URL: master-integrade.1b13.insights.openshiftapps.com
    OPENSHIFT_PREFIX: c-master-integrade-
    REPORT_NAME: ui_edge
    UI_BROWSER: MicrosoftEdge
    EXTRA_PYTEST_ARGS: "-x --ff"

# Clean up master review environments
.stop_master_review: &stop_master_review
  stage: Teardown Cloudigrade
  only:
    - master
    - schedule
  when: always
  script: curl --request POST --header "${AUTH}" https://gitlab.com/api/v4/projects/${PROJECT_ID}/environments/$(curl --header "${AUTH}" https://gitlab.com/api/v4/projects/${PROJECT_ID}/environments | jq '.[] | select(.name=="review/master-integrade") | .id')/stop

Teardown Cloudigrade (Master):
  <<: *stop_master_review
  variables:
    GIT_STRATEGY: none
    PROJECT_ID: 7449616
    AUTH: "PRIVATE-TOKEN: ${API_TOKEN}"

Teardown Frontigrade (Master):
  <<: *stop_master_review
  variables:
    GIT_STRATEGY: none
    PROJECT_ID: 7449617
    AUTH: "PRIVATE-TOKEN: ${API_TOKEN}"

# Cleans up customer accounts between test runs
Test Cleanup:
  stage: Cleanup
  <<: *before_script
  variables:
    CLOUDTRAIL_PREFIX: master-integrade-
    AWS_S3_BUCKET_NAME: master-integrade-cloudigrade-s3
    AWS_QUEUE_PREFIX: master-integrade-
    CLOUDIGRADE_BASE_URL: master-integrade.1b13.insights.openshiftapps.com
    OPENSHIFT_PREFIX: c-master-integrade-
  script:
    - python scripts/aws_reaper.py --env-cloudtrail-only
  when: always

Nightly Cleanup:on-schedule:
  stage: Cleanup
  only:
    - schedules
  # will only run on the scheduled pipeline,
  # 'always' in this context means it will run
  # even if prior stages fail
  when: always
  before_script:
    - python --version
    - oc version
    - make install-dev
  script:
    - python scripts/aws_reaper.py --all-integrade-cloudtrails
