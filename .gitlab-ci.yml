image: registry.gitlab.com/cloudigrade/images/test-container

stages:
  - Test Integrade
  - Deploy Cloudigrade
  - Test Cloudigrade Inspection
  - Test API
  - Test UI
  - Teardown Cloudigrade
  - Cleanup

Test Integrade:
  stage: Test Integrade
  before_script:
    - python --version
    - make install-dev
    - pip install codecov
  script:
    - make lint
    - make test-coverage
    - codecov
  coverage: '/\d+\%\s*$/'

Deploy Cloudigrade:
  stage: Deploy Cloudigrade
  image: registry.gitlab.com/cloudigrade/images/deploy-container:latest
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}.review.gitlab.cloudigra.de
    on_stop: Teardown Cloudigrade
  variables:
    ENVIRONMENT_SLUG: ${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}
    GIT_STRATEGY: none
  before_script:
    - oc login ${OPENSHIFT_URL} --token ${GITLAB_CI_SA_TOKEN}
    - git clone https://gitlab.com/cloudigrade/shiftigrade.git
    - cd shiftigrade
  script:
    - export CLOUDTRAIL_EVENT_URL="https://sqs.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ACCOUNT_NUMBER}/${ENVIRONMENT_SLUG}-cloudigrade-cloudtrail-sqs"
    - export DB_SECRETS_FILE_NAME="${ENVIRONMENT_SLUG}-db"
    - export DEPLOYMENT_PREFIX="${ENVIRONMENT_SLUG}"
    - export DJANGO_DATABASE_HOST="${ENVIRONMENT_SLUG}-db.${OPENSHIFT_PROJECT}.svc"
    - export DJANGO_SECRET_KEY="${CI_COMMIT_SHA}"  # TODO: generate a proper secret key
    - export GITLAB_DEPLOYMENT="${ENVIRONMENT_SLUG}"
    - export HOUNDIGRADE_ECS_CLUSTER_NAME="${ENVIRONMENT_SLUG}-houndigrade"
    - export HOUNDIGRADE_AWS_AUTOSCALING_GROUP_NAME="${HOUNDIGRADE_ECS_CLUSTER_NAME}-asg"
    - export HOUNDIGRADE_LAUNCH_CONFIG_NAME="${HOUNDIGRADE_ECS_CLUSTER_NAME}-lc"
    - export EC2_HOST_NAME="${HOUNDIGRADE_ECS_CLUSTER_NAME}-host"
    - export AWS_S3_BUCKET_NAME="${ENVIRONMENT_SLUG}-cloudigrade-s3"

    - cd ansible
    - >
      ansible-playbook \
        -e application_name=houndigrade \
        -e aws_prefix="${DEPLOYMENT_PREFIX}" \
        -e ec2_ami_id="${RECOMMENDED_AMI}" \
        -e ec2_asg_availability_zones="${HOUNDIGRADE_AWS_AVAILABILITY_ZONE}" \
        -e ec2_asg_desired_capacity=0 \
        -e ec2_asg_max_size=0 \
        -e ec2_asg_min_size=0 \
        -e ec2_asg_name="${HOUNDIGRADE_AWS_AUTOSCALING_GROUP_NAME}" \
        -e ec2_asg_vpc_subnets="${SUBNET_NAME}" \
        -e ec2_instance_name="${EC2_HOST_NAME}" \
        -e ec2_instance_type="${INSTANCE_TYPE}" \
        -e ec2_launch_configuration_name="${HOUNDIGRADE_LAUNCH_CONFIG_NAME}" \
        -e ec2_security_groups="${SECURITY_GROUP_NAME}" \
        -e ecs_cluster_name="${HOUNDIGRADE_ECS_CLUSTER_NAME}" \
        -e key_name="${SSH_KEY_NAME}" \
        -e vpc_name="${VPC_NAME}" \
        -e bucket_name="${AWS_S3_BUCKET_NAME}" \
        provision-aws-resources.yaml
    - ansible-playbook -e aws_prefix="${DEPLOYMENT_PREFIX}" clean-sqs.yaml
    - cd -

    - >
      oc process openshift//postgresql-ephemeral \
        -p NAMESPACE=openshift \
        -p DATABASE_SERVICE_NAME=${ENVIRONMENT_SLUG}-db \
        -p POSTGRESQL_DATABASE=postgres \
        -p POSTGRESQL_VERSION=9.6 \
      | oc apply -f -
    - oc rollout status dc/${ENVIRONMENT_SLUG}-db

    - kontemplate template ocp/review.yaml | oc apply -f -
    - oc rollout status "dc/${ENVIRONMENT_SLUG}cloudigrade-api"
    - oc rollout status "dc/${ENVIRONMENT_SLUG}cloudigrade-celery-beat"
    - oc rollout status "dc/${ENVIRONMENT_SLUG}cloudigrade-celery-worker"
    - oc rollout status "dc/${ENVIRONMENT_SLUG}frontigrade"

.teardown_cloudigrade: &teardown_cloudigrade
  image: registry.gitlab.com/cloudigrade/images/deploy-container:latest
  variables:
    ENVIRONMENT_SLUG: ${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}
    GIT_STRATEGY: none
  before_script:
    - oc login ${OPENSHIFT_URL} --token ${GITLAB_CI_SA_TOKEN}
    - git clone https://gitlab.com/cloudigrade/shiftigrade.git
    - cd shiftigrade
  script:
    - oc delete bc,cm,dc,is,routes,secrets,svc -l gitlab-deployment="${ENVIRONMENT_SLUG}"
    - oc delete dc,svc,secret "${ENVIRONMENT_SLUG}-db"

    - export DEPLOYMENT_PREFIX="${ENVIRONMENT_SLUG}"
    - export HOUNDIGRADE_ECS_CLUSTER_NAME="${ENVIRONMENT_SLUG}-houndigrade"
    - export HOUNDIGRADE_AWS_AUTOSCALING_GROUP_NAME="${HOUNDIGRADE_ECS_CLUSTER_NAME}-asg"
    - export HOUNDIGRADE_LAUNCH_CONFIG_NAME="${HOUNDIGRADE_ECS_CLUSTER_NAME}-lc"

    - cd ansible
    - >
      ansible-playbook \
        -e aws_prefix="${DEPLOYMENT_PREFIX}" \
        -e bucket_state=absent \
        -e ec2_asg_name="${HOUNDIGRADE_AWS_AUTOSCALING_GROUP_NAME}" \
        -e ec2_asg_state=absent \
        -e ec2_launch_configuration_name="${HOUNDIGRADE_LAUNCH_CONFIG_NAME}" \
        -e ec2_lc_state=absent \
        -e ecs_cluster_name="${HOUNDIGRADE_ECS_CLUSTER_NAME}" \
        -e ecs_state=absent \
        -e sqs_state=absent \
        provision-aws-resources.yaml
    - ansible-playbook -e aws_prefix="${DEPLOYMENT_PREFIX}" -e sqs_state=absent clean-sqs.yaml
    - cd -
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop

Teardown Cloudigrade:
  stage: Deploy Cloudigrade
  except:
    - master
  when: manual
  <<: *teardown_cloudigrade

Automatically Teardown Cloudigrade:
  stage: Teardown Cloudigrade
  only:
    - master
  when: always
  <<: *teardown_cloudigrade

.before_script: &before_script
  before_script:
    - python --version
    - oc version
    - make install-dev
    - export CLOUDIGRADE_BASE_URL="${ENVIRONMENT_SLUG}.review.gitlab.cloudigra.de"
    - export DEPLOYMENT_PREFIX="${ENVIRONMENT_SLUG}"
    - oc login ${OPENSHIFT_URL} --token ${GITLAB_CI_SA_TOKEN}
    - source scripts/oc-auth.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}.review.gitlab.cloudigra.de
    on_stop: Teardown Cloudigrade
  variables:
    ENVIRONMENT_SLUG: ${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}

Inspection:
  stage: Test Cloudigrade Inspection
  only:
    refs:
      - master
  <<: *before_script
  script:
    - export AWS_S3_BUCKET_NAME="${ENVIRONMENT_SLUG}-cloudigrade-s3"
    - cp .aws_image_config.yaml integrade/aws_image_config.yaml
    - export XDG_CONFIG_HOME=$PWD
    - py.test -vvv -m 'run_first' integrade/tests/api

.api_all: &api_all
  script:
    - py.test -vvv -m 'not run_first' integrade/tests/api

API All Automatically:
  stage: Test API
  only:
    refs:
      - master
  when: always
  <<: *before_script
  <<: *api_all

API All Manually:
  stage: Test API
  except:
    refs:
      - master
  when: manual
  <<: *before_script
  <<: *api_all
  
API Quick:
  stage: Test API
  except:
    refs:
      - master
  <<: *before_script
  script:
    - export TEST_MODULES="$(git diff-tree --no-commit-id --name-only -r HEAD integrade/tests/api)"
    - if [[ "${TEST_MODULES}" ]]; then echo "${TEST_MODULES}" | xargs py.test -vvv -m 'not run_first'; fi


UI Chrome:
  stage: Test UI
  <<: *before_script
  script:
    - py.test -vvv --driver Remote --capability browserName chrome --host selenium --port 4444 integrade/tests/ui
  services:
    - name: selenium/standalone-chrome
      alias: selenium

UI Firefox:
  stage: Test UI
  only:
    refs:
      - master
  <<: *before_script
  script:
    - py.test -vvv --driver Remote --capability browserName firefox --host selenium --port 4444 integrade/tests/ui
  services:
    - name: selenium/standalone-firefox
      alias: selenium

UI Microsoft Edge:
  stage: Test UI
  only:
    refs:
      - master
  <<: *before_script
  script:
    - py.test -vvv --driver SauceLabs --capability browserName MicrosoftEdge integrade/tests/ui

# Cleans up customer accounts between test runs
Test Cleanup:
  stage: Teardown Cloudigrade
  <<: *before_script
  script:
    - python scripts/aws_reaper.py --env-cloudtrail-only
  when: always

Nightly Cleanup:on-schedule:
  stage: Cleanup
  only:
    - schedules
  before_script:
    - python --version
    - oc version
    - make install-dev
  script:
    - python scripts/aws_reaper.py --all-integrade-cloudtrails
